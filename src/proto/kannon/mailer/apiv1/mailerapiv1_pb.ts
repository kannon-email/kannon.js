// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file kannon/mailer/apiv1/mailerapiv1.proto (package pkg.kannon.mailer.apiv1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Recipient, Sender } from "../types/send_pb";

/**
 * @generated from message pkg.kannon.mailer.apiv1.Attachment
 */
export class Attachment extends Message<Attachment> {
  /**
   * @generated from field: string filename = 1;
   */
  filename = "";

  /**
   * @generated from field: bytes content = 2;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<Attachment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pkg.kannon.mailer.apiv1.Attachment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attachment {
    return new Attachment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attachment {
    return new Attachment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attachment {
    return new Attachment().fromJsonString(jsonString, options);
  }

  static equals(a: Attachment | PlainMessage<Attachment> | undefined, b: Attachment | PlainMessage<Attachment> | undefined): boolean {
    return proto3.util.equals(Attachment, a, b);
  }
}

/**
 * @generated from message pkg.kannon.mailer.apiv1.SendHTMLReq
 */
export class SendHTMLReq extends Message<SendHTMLReq> {
  /**
   * @generated from field: pkg.kannon.mailer.types.Sender sender = 1;
   */
  sender?: Sender;

  /**
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * @generated from field: string html = 4;
   */
  html = "";

  /**
   * @generated from field: optional google.protobuf.Timestamp scheduled_time = 5;
   */
  scheduledTime?: Timestamp;

  /**
   * @generated from field: repeated pkg.kannon.mailer.types.Recipient recipients = 6;
   */
  recipients: Recipient[] = [];

  /**
   * @generated from field: repeated pkg.kannon.mailer.apiv1.Attachment attachments = 7;
   */
  attachments: Attachment[] = [];

  /**
   * @generated from field: map<string, string> global_fields = 8;
   */
  globalFields: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SendHTMLReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pkg.kannon.mailer.apiv1.SendHTMLReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "message", T: Sender },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "html", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "scheduled_time", kind: "message", T: Timestamp, opt: true },
    { no: 6, name: "recipients", kind: "message", T: Recipient, repeated: true },
    { no: 7, name: "attachments", kind: "message", T: Attachment, repeated: true },
    { no: 8, name: "global_fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendHTMLReq {
    return new SendHTMLReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendHTMLReq {
    return new SendHTMLReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendHTMLReq {
    return new SendHTMLReq().fromJsonString(jsonString, options);
  }

  static equals(a: SendHTMLReq | PlainMessage<SendHTMLReq> | undefined, b: SendHTMLReq | PlainMessage<SendHTMLReq> | undefined): boolean {
    return proto3.util.equals(SendHTMLReq, a, b);
  }
}

/**
 * @generated from message pkg.kannon.mailer.apiv1.SendTemplateReq
 */
export class SendTemplateReq extends Message<SendTemplateReq> {
  /**
   * @generated from field: pkg.kannon.mailer.types.Sender sender = 1;
   */
  sender?: Sender;

  /**
   * @generated from field: string subject = 3;
   */
  subject = "";

  /**
   * @generated from field: string template_id = 4;
   */
  templateId = "";

  /**
   * @generated from field: optional google.protobuf.Timestamp scheduled_time = 5;
   */
  scheduledTime?: Timestamp;

  /**
   * @generated from field: repeated pkg.kannon.mailer.types.Recipient recipients = 6;
   */
  recipients: Recipient[] = [];

  /**
   * @generated from field: repeated pkg.kannon.mailer.apiv1.Attachment attachments = 7;
   */
  attachments: Attachment[] = [];

  /**
   * @generated from field: map<string, string> global_fields = 8;
   */
  globalFields: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SendTemplateReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pkg.kannon.mailer.apiv1.SendTemplateReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "message", T: Sender },
    { no: 3, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "template_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "scheduled_time", kind: "message", T: Timestamp, opt: true },
    { no: 6, name: "recipients", kind: "message", T: Recipient, repeated: true },
    { no: 7, name: "attachments", kind: "message", T: Attachment, repeated: true },
    { no: 8, name: "global_fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTemplateReq {
    return new SendTemplateReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTemplateReq {
    return new SendTemplateReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTemplateReq {
    return new SendTemplateReq().fromJsonString(jsonString, options);
  }

  static equals(a: SendTemplateReq | PlainMessage<SendTemplateReq> | undefined, b: SendTemplateReq | PlainMessage<SendTemplateReq> | undefined): boolean {
    return proto3.util.equals(SendTemplateReq, a, b);
  }
}

/**
 * @generated from message pkg.kannon.mailer.apiv1.SendRes
 */
export class SendRes extends Message<SendRes> {
  /**
   * @generated from field: string message_id = 1;
   */
  messageId = "";

  /**
   * @generated from field: string template_id = 2;
   */
  templateId = "";

  /**
   * @generated from field: google.protobuf.Timestamp scheduled_time = 3;
   */
  scheduledTime?: Timestamp;

  constructor(data?: PartialMessage<SendRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pkg.kannon.mailer.apiv1.SendRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "template_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scheduled_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendRes {
    return new SendRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendRes {
    return new SendRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendRes {
    return new SendRes().fromJsonString(jsonString, options);
  }

  static equals(a: SendRes | PlainMessage<SendRes> | undefined, b: SendRes | PlainMessage<SendRes> | undefined): boolean {
    return proto3.util.equals(SendRes, a, b);
  }
}

