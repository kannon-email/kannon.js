// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file kannon/mailer/types/email.proto (package pkg.kannon.mailer.types, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pkg.kannon.mailer.types.EmailToSend
 */
export class EmailToSend extends Message<EmailToSend> {
  /**
   * @generated from field: string email_id = 1;
   */
  emailId = "";

  /**
   * @generated from field: string from = 2;
   */
  from = "";

  /**
   * @generated from field: string to = 3;
   */
  to = "";

  /**
   * @generated from field: string return_path = 4;
   */
  returnPath = "";

  /**
   * @generated from field: bytes body = 5;
   */
  body = new Uint8Array(0);

  /**
   * @generated from field: bool should_retry = 6;
   */
  shouldRetry = false;

  constructor(data?: PartialMessage<EmailToSend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pkg.kannon.mailer.types.EmailToSend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "return_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "should_retry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailToSend {
    return new EmailToSend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailToSend {
    return new EmailToSend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailToSend {
    return new EmailToSend().fromJsonString(jsonString, options);
  }

  static equals(a: EmailToSend | PlainMessage<EmailToSend> | undefined, b: EmailToSend | PlainMessage<EmailToSend> | undefined): boolean {
    return proto3.util.equals(EmailToSend, a, b);
  }
}

