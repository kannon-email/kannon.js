// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file kannon/mailer/types/send.proto (package pkg.kannon.mailer.types, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pkg.kannon.mailer.types.Sender
 */
export class Sender extends Message<Sender> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string alias = 2;
   */
  alias = "";

  constructor(data?: PartialMessage<Sender>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pkg.kannon.mailer.types.Sender";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sender {
    return new Sender().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sender {
    return new Sender().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sender {
    return new Sender().fromJsonString(jsonString, options);
  }

  static equals(a: Sender | PlainMessage<Sender> | undefined, b: Sender | PlainMessage<Sender> | undefined): boolean {
    return proto3.util.equals(Sender, a, b);
  }
}

/**
 * @generated from message pkg.kannon.mailer.types.Recipient
 */
export class Recipient extends Message<Recipient> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: map<string, string> fields = 2;
   */
  fields: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Recipient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pkg.kannon.mailer.types.Recipient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Recipient {
    return new Recipient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Recipient {
    return new Recipient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Recipient {
    return new Recipient().fromJsonString(jsonString, options);
  }

  static equals(a: Recipient | PlainMessage<Recipient> | undefined, b: Recipient | PlainMessage<Recipient> | undefined): boolean {
    return proto3.util.equals(Recipient, a, b);
  }
}

